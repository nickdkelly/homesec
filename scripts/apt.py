import base64
import optparse
from os.path import basename

def open_file(file_name, base_64):
    decoded_file = base64.decodebytes(str.encode(base_64))
    write_to_xml(decoded_file, file_name)

def write_to_xml(decoded_file, file_name):
    file = open(file_name + ".xml", "wb")
    file.write(decoded_file)
    file.close()

def main():

    xml_encode = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjxvdXRwdXQ+DQogICAgPHByb2dyYW0+DQogICAgICAgIDxuYW1lPmFwdDwvbmFtZT4NCiAgICAgICAgPHZlcnNpb24+Ti9BPC92ZXJzaW9uPg0KICAgICAgICA8ZGF0ZT4xNC1GZWItMjAxOCAxOTowMDowNTwvZGF0ZT4NCiAgICAgICAgPGRlc2NyaXB0aW9uPkFwdCBVcGdyYWRlIGNoZWNrPC9kZXNjcmlwdGlvbj4NCiAgICA8L3Byb2dyYW0+DQogICAgPHJhdz4NCiAgICAgICAgc3VkbyBhcHQgdXBncmFkZQ0KICAgICAgICBSZWFkaW5nIHBhY2thZ2UgbGlzdHMuLi4gRG9uZQ0KICAgICAgICBCdWlsZGluZyBkZXBlbmRlbmN5IHRyZWUNCiAgICAgICAgUmVhZGluZyBzdGF0ZSBpbmZvcm1hdGlvbi4uLiBEb25lDQogICAgICAgIENhbGN1bGF0aW5nIHVwZ3JhZGUuLi4gRG9uZQ0KICAgICAgICBUaGUgZm9sbG93aW5nIHBhY2thZ2VzIHdlcmUgYXV0b21hdGljYWxseSBpbnN0YWxsZWQgYW5kIGFyZSBubyBsb25nZXIgcmVxdWlyZWQ6DQogICAgICAgIGxpbnV4LWhlYWRlcnMtNC40LjAtMTAxIGxpbnV4LWhlYWRlcnMtNC40LjAtMTAxLWdlbmVyaWMgbGludXgtaGVhZGVycy00LjQuMC0xMDMNCiAgICAgICAgbGludXgtaGVhZGVycy00LjQuMC0xMDMtZ2VuZXJpYyBsaW51eC1oZWFkZXJzLTQuNC4wLTEwNCBsaW51eC1oZWFkZXJzLTQuNC4wLTEwNC1nZW5lcmljDQogICAgICAgIGxpbnV4LWhlYWRlcnMtNC40LjAtMTA4IGxpbnV4LWhlYWRlcnMtNC40LjAtMTA4LWdlbmVyaWMgbGludXgtaGVhZGVycy00LjQuMC02Mg0KICAgICAgICBsaW51eC1oZWFkZXJzLTQuNC4wLTYyLWdlbmVyaWMgbGludXgtaGVhZGVycy00LjQuMC05MyBsaW51eC1oZWFkZXJzLTQuNC4wLTkzLWdlbmVyaWMNCiAgICAgICAgbGludXgtaGVhZGVycy00LjQuMC05NyBsaW51eC1oZWFkZXJzLTQuNC4wLTk3LWdlbmVyaWMgbGludXgtaGVhZGVycy00LjQuMC05OA0KICAgICAgICBsaW51eC1oZWFkZXJzLTQuNC4wLTk4LWdlbmVyaWMgbGludXgtaW1hZ2UtNC40LjAtMTAxLWdlbmVyaWMgbGludXgtaW1hZ2UtNC40LjAtMTAzLWdlbmVyaWMNCiAgICAgICAgbGludXgtaW1hZ2UtNC40LjAtMTA0LWdlbmVyaWMgbGludXgtaW1hZ2UtNC40LjAtMTA4LWdlbmVyaWMgbGludXgtaW1hZ2UtNC40LjAtNjItZ2VuZXJpYw0KICAgICAgICBsaW51eC1pbWFnZS00LjQuMC05My1nZW5lcmljIGxpbnV4LWltYWdlLTQuNC4wLTk3LWdlbmVyaWMgbGludXgtaW1hZ2UtNC40LjAtOTgtZ2VuZXJpYw0KICAgICAgICBsaW51eC1pbWFnZS1leHRyYS00LjQuMC0xMDEtZ2VuZXJpYyBsaW51eC1pbWFnZS1leHRyYS00LjQuMC0xMDMtZ2VuZXJpYw0KICAgICAgICBsaW51eC1pbWFnZS1leHRyYS00LjQuMC0xMDQtZ2VuZXJpYyBsaW51eC1pbWFnZS1leHRyYS00LjQuMC0xMDgtZ2VuZXJpYw0KICAgICAgICBsaW51eC1pbWFnZS1leHRyYS00LjQuMC02Mi1nZW5lcmljIGxpbnV4LWltYWdlLWV4dHJhLTQuNC4wLTkzLWdlbmVyaWMNCiAgICAgICAgbGludXgtaW1hZ2UtZXh0cmEtNC40LjAtOTctZ2VuZXJpYyBsaW51eC1pbWFnZS1leHRyYS00LjQuMC05OC1nZW5lcmljDQogICAgICAgIFVzZSAnc3VkbyBhcHQgYXV0b3JlbW92ZScgdG8gcmVtb3ZlIHRoZW0uDQogICAgICAgIFRoZSBmb2xsb3dpbmcgTkVXIHBhY2thZ2VzIHdpbGwgYmUgaW5zdGFsbGVkDQogICAgICAgIGxpYmRybS1jb21tb24NCiAgICAgICAgVGhlIGZvbGxvd2luZyBwYWNrYWdlcyB3aWxsIGJlIHVwZ3JhZGVkOg0KICAgICAgICBhcHBhcm1vciBhcHQgYXB0LXRyYW5zcG9ydC1odHRwcyBhcHQtdXRpbHMgYnNkdXRpbHMgY2xvdWQtZ3Vlc3QtdXRpbHMgY2xvdWQtaW5pdHJhbWZzLWNvcHltb2RzDQogICAgICAgIGNsb3VkLWluaXRyYW1mcy1keW4tbmV0Y29uZiBkaXN0cm8taW5mby1kYXRhIGRuc21hc3EtYmFzZSBkcGtnIGdjYy01LWJhc2UgZ3J1Yi1jb21tb24NCiAgICAgICAgZ3J1Yi1sZWdhY3ktZWMyIGdydWItcGMgZ3J1Yi1wYy1iaW4gZ3J1YjItY29tbW9uIGluaXRyYW1mcy10b29scyBpbml0cmFtZnMtdG9vbHMtYmluDQogICAgICAgIGluaXRyYW1mcy10b29scy1jb3JlIGlwcm91dGUyIGtsaWJjLXV0aWxzIGxpYmFwYWNoZTItbW9kLXBocCBsaWJhcGFjaGUyLW1vZC1waHA3LjANCiAgICAgICAgbGliYXBwYXJtb3ItcGVybCBsaWJhcHBhcm1vcjEgbGliYXB0LWluc3QyLjAgbGliYXB0LXBrZzUuMCBsaWJibGtpZDEgbGliZHJtMiBsaWJmZGlzazENCiAgICAgICAgbGlia2xpYmMgbGlibW91bnQxIGxpYnBhcnRlZDIgbGlicHl0aG9uMi43LW1pbmltYWwgbGlicHl0aG9uMi43LXN0ZGxpYiBsaWJzZWNjb21wMg0KICAgICAgICBsaWJzbWFydGNvbHMxIGxpYnN0ZGMrKzYgbGlidXVpZDEgbHNodyBseGNmcyBseGQgbHhkLWNsaWVudCBtZGFkbSBtb3VudCBvdmVybGF5cm9vdCBwYXJ0ZWQgcGhwDQogICAgICAgIHBocC1jb21tb24gcGhwLWdkIHBocC1tYnN0cmluZyBwaHAtbWNyeXB0IHBocC1teXNxbCBwaHAteG1sIHBocDcuMCBwaHA3LjAtY2xpIHBocDcuMC1jb21tb24NCiAgICAgICAgcGhwNy4wLWdkIHBocDcuMC1qc29uIHBocDcuMC1tYnN0cmluZyBwaHA3LjAtbWNyeXB0IHBocDcuMC1teXNxbCBwaHA3LjAtb3BjYWNoZQ0KICAgICAgICBwaHA3LjAtcmVhZGxpbmUgcGhwNy4wLXhtbCBweXRob24yLjcgcHl0aG9uMi43LW1pbmltYWwgcHl0aG9uMy1kaXN0dXBncmFkZSByZXNvbHZjb25mDQogICAgICAgIHNuYXAtY29uZmluZSBzbmFwZCBzb3NyZXBvcnQgc3F1YXNoZnMtdG9vbHMgdWJ1bnR1LWNvcmUtbGF1bmNoZXIgdWJ1bnR1LW1pbmltYWwNCiAgICAgICAgdWJ1bnR1LXJlbGVhc2UtdXBncmFkZXItY29yZSB1YnVudHUtc2VydmVyIHVidW50dS1zdGFuZGFyZCB1bmF0dGVuZGVkLXVwZ3JhZGVzIHV0aWwtbGludXgNCiAgICAgICAgdXVpZC1ydW50aW1lDQogICAgICAgIDgyIHRvIHVwZ3JhZGUsIDEgdG8gbmV3bHkgaW5zdGFsbCwgMCB0byByZW1vdmUgYW5kIDAgbm90IHRvIHVwZ3JhZGUuDQogICAgICAgIDcgbm90IGZ1bGx5IGluc3RhbGxlZCBvciByZW1vdmVkLg0KICAgICAgICBOZWVkIHRvIGdldCAzOC42IE1CIG9mIGFyY2hpdmVzLg0KICAgICAgICBBZnRlciB0aGlzIG9wZXJhdGlvbiwgMTEuMyBNQiBvZiBhZGRpdGlvbmFsIGRpc2sgc3BhY2Ugd2lsbCBiZSB1c2VkLg0KICAgICAgICBEbyB5b3Ugd2FudCB0byBjb250aW51ZT8gW1kvbl0NCiAgICA8L3Jhdz4NCiAgICA8ZXJyb3JzPg0KICAgICAgICA8ZXJyb3IgZGVzY3JpcHRpb249IlJlZHVuZGFudCBMaW51eCBIZWFkZXJzIiB2YWx1ZT0ibGludXgtaGVhZGVycy00LjQuMC0xMDEgbGludXgtaGVhZGVycy00LjQuMC0xMDEtZ2VuZXJpYyBsaW51eC1oZWFkZXJzLTQuNC4wLTEwMyBsaW51eC1oZWFkZXJzLTQuNC4wLTEwMy1nZW5lcmljIGxpbnV4LWhlYWRlcnMtNC40LjAtMTA0IGxpbnV4LWhlYWRlcnMtNC40LjAtMTA0LWdlbmVyaWMgbGludXgtaGVhZGVycy00LjQuMC0xMDggbGludXgtaGVhZGVycy00LjQuMC0xMDgtZ2VuZXJpYyBsaW51eC1oZWFkZXJzLTQuNC4wLTYyIGxpbnV4LWhlYWRlcnMtNC40LjAtNjItZ2VuZXJpYyBsaW51eC1oZWFkZXJzLTQuNC4wLTkzIGxpbnV4LWhlYWRlcnMtNC40LjAtOTMtZ2VuZXJpYyBsaW51eC1oZWFkZXJzLTQuNC4wLTk3IGxpbnV4LWhlYWRlcnMtNC40LjAtOTctZ2VuZXJpYyBsaW51eC1oZWFkZXJzLTQuNC4wLTk4IGxpbnV4LWhlYWRlcnMtNC40LjAtOTgtZ2VuZXJpYyBsaW51eC1pbWFnZS00LjQuMC0xMDEtZ2VuZXJpYyBsaW51eC1pbWFnZS00LjQuMC0xMDMtZ2VuZXJpYyBsaW51eC1pbWFnZS00LjQuMC0xMDQtZ2VuZXJpYyBsaW51eC1pbWFnZS00LjQuMC0xMDgtZ2VuZXJpYyBsaW51eC1pbWFnZS00LjQuMC02Mi1nZW5lcmljIGxpbnV4LWltYWdlLTQuNC4wLTkzLWdlbmVyaWMgbGludXgtaW1hZ2UtNC40LjAtOTctZ2VuZXJpYyBsaW51eC1pbWFnZS00LjQuMC05OC1nZW5lcmljIGxpbnV4LWltYWdlLWV4dHJhLTQuNC4wLTEwMS1nZW5lcmljIGxpbnV4LWltYWdlLWV4dHJhLTQuNC4wLTEwMy1nZW5lcmljIGxpbnV4LWltYWdlLWV4dHJhLTQuNC4wLTEwNC1nZW5lcmljIGxpbnV4LWltYWdlLWV4dHJhLTQuNC4wLTEwOC1nZW5lcmljIGxpbnV4LWltYWdlLWV4dHJhLTQuNC4wLTYyLWdlbmVyaWMgbGludXgtaW1hZ2UtZXh0cmEtNC40LjAtOTMtZ2VuZXJpYyBsaW51eC1pbWFnZS1leHRyYS00LjQuMC05Ny1nZW5lcmljIGxpbnV4LWltYWdlLWV4dHJhLTQuNC4wLTk4LWdlbmVyaWMiLz4NCiAgICAgICAgPGVycm9yIGRlc2NyaXB0aW9uPSJDb3JlIHByb2dyYW1zIHJlcXVpcmUgdXBkYXRpbmciIHZhbHVlPSJ1YnVudHUtc2VydmVyICIvPg0KICAgIDwvZXJyb3JzPg0KPC9vdXRwdXQ+"
    
    parser = optparse.OptionParser("usage %prog " + \
                                   "-o output_file_name ")
    parser.add_option('-o', dest='output_file_name', type='string', \
                      help='Set the output file location')
    (options, arg) = parser.parse_args()

    output_file_name = basename(__file__).replace('.py', '') + '.xml'
    if (options.output_file_name != None):
        output_file_name = options.output_file_name

    open_file(output_file_name,xml_encode)

if __name__ == "__main__":
    main()
