import base64
import optparse
from os.path import basename

def open_file(file_name, base_64):
    decoded_file = base64.decodebytes(str.encode(base_64))
    write_to_xml(decoded_file, file_name)

def write_to_xml(decoded_file, file_name):
    file = open(file_name + ".xml", "wb")
    file.write(decoded_file)
    file.close()

def main():

    xml_encode = ""
    
    parser = optparse.OptionParser("usage %prog " + \
                                   "-o output_file_name ")
    parser.add_option('-o', dest='output_file_name', type='string', \
                      help='Set the output file location')
    (options, arg) = parser.parse_args()

    output_file_name = basename(__file__).replace('.py', '') + '.xml'
    if (options.output_file_name != None):
        output_file_name = options.output_file_name

    open_file(output_file_name,xml_encode)

if __name__ == "__main__":
    main()
